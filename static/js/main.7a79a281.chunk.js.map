{"version":3,"sources":["PostForm.js","Post.js","Edit.js","AllPost.js","App.js","serviceWorker.js","reducers/postReducer.js","index.js"],"names":["PostForm","handleSubmit","e","preventDefault","title","getTitle","value","message","getMessage","data","id","Date","edit","props","dispatch","type","className","onSubmit","this","required","placeholder","ref","input","row","cols","Component","connect","Post","post","onClick","Edit","handleEdit","newTitle","newMessage","key","defaultValue","rows","AllPost","posts","map","state","App","React","Boolean","window","location","hostname","match","postReducer","action","concat","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2QAMMA,E,4MAENC,aAAa,SAACC,GACdA,EAAEC,iBACF,IAAIC,EAAQ,EAAKC,SAASC,MACtBC,EAAU,EAAKC,WAAWF,MAExBG,EAAM,CACRC,GAAI,IAAIC,KACRP,QACAG,UACAK,MAAM,GAGV,EAAKC,MAAMC,SAAS,CAChBC,KAAK,WACLN,SAGJ,EAAKJ,SAASC,MAAM,GACpB,EAAKE,WAAWF,MAAM,I,uDAGR,IAAD,OACL,OACI,yBAAKU,UAAU,kBACX,wBAAIA,UAAU,gBAAd,eACA,0BAAMA,UAAU,OAAOC,SAAYC,KAAKjB,cACpC,2BAAOkB,UAAQ,EAACJ,KAAM,OAAOK,YAAc,mBAAmBC,IAAM,SAACC,GAAD,OAAS,EAAKjB,SAAUiB,KAAQ,6BAAK,6BACzG,8BAAUH,UAAQ,EAACI,IAAI,IAAIC,KAAM,KAAKJ,YAAY,aAAaC,IAAO,SAACC,GAAD,OAAS,EAAKd,WAAYc,KAAQ,6BAAK,6BAC7G,8C,GA9BGG,aAsCRC,gBAAU1B,GCzClB2B,E,uKACQ,IAAD,OACL,OACI,yBAAKX,UAAU,QACX,wBAAIA,UAAU,cACTE,KAAKL,MAAMe,KAAKxB,OAErB,uBAAGY,UAAU,gBAAgBE,KAAKL,MAAMe,KAAKrB,SAC7C,yBAAKS,UAAU,mBAC5B,4BAAQA,UAAU,OAClBa,QAAS,kBAAM,EAAKhB,MAAMC,SAAS,CAAEC,KAAM,YAAaL,GAAI,EAAKG,MAAMe,KAAKlB,OAD5E,QAIA,4BAAQM,UAAU,SAClBa,QAAS,kBAAM,EAAKhB,MAAMC,SAAS,CAAEC,KAAM,cAAeL,GAAI,EAAKG,MAAMe,KAAKlB,OAD9E,gB,GAbgBe,aAsBJC,gBAAUC,GCtBpBG,E,4MAENC,WAAW,SAAC7B,GACRA,EAAEC,iBACF,IAEIM,EAAK,CACPuB,SAHe,EAAK3B,SAASC,MAI7B2B,WAHe,EAAKzB,WAAWF,OAMnC,EAAKO,MAAMC,SAAS,CAACC,KAAM,SAAUL,GAAI,EAAKG,MAAMe,KAAKlB,GAAID,KAAKA,K,uDAGtD,IAAD,OACL,OACI,yBAAKyB,IAAKhB,KAAKL,MAAMe,KAAKlB,GAAIM,UAAU,QACpC,0BAAMA,UAAU,OAAOC,SAAYC,KAAKa,YACxC,2BAAOZ,UAAQ,EAACJ,KAAK,OAAOM,IAAK,SAACC,GAAD,OAAW,EAAKjB,SAAWiB,GACxEa,aAAcjB,KAAKL,MAAMe,KAAKxB,MAAOgB,YAAY,qBAAqB,6BAAM,6BAC5E,8BAAUD,UAAQ,EAACiB,KAAK,IAAIf,IAAK,SAACC,GAAD,OAAW,EAAKd,WAAac,GAC9Da,aAAcjB,KAAKL,MAAMe,KAAKrB,QAASiB,KAAK,KAAKJ,YAAY,eAAe,6BAAM,6BAClF,gD,GAtBeK,aA6BJC,gBAAUI,GC1BnBO,E,uKAEE,OACI,6BACG,wBAAIrB,UAAU,gBAAd,aACCE,KAAKL,MAAMyB,MAAMC,KAAI,SAACX,GAAD,OAClB,yBAAKM,IAAON,EAAKlB,IACZkB,EAAKhB,KAAO,kBAAC,EAAD,CAAMgB,KAAQA,EAAMM,IAAMN,EAAKlB,KAC1C,kBAAC,EAAD,CAAMwB,IAAON,EAAKlB,GAAIkB,KAAQA,a,GARjCH,aAwBPC,eANS,SAACc,GACrB,MAAO,CACTF,MAAOE,KAIMd,CAAyBW,GCRzBI,G,6KAdX,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAY,UACf,wBAAIA,UAAU,UAAd,YAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARU0B,IAAMjB,YCMJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCiBSC,EAhCG,WAAsB,IAArBR,EAAoB,uDAAb,GAAIS,EAAS,uCACnC,OAAQA,EAAOlC,MAEX,IAAK,WACD,OAAOyB,EAAMU,OAAO,CAACD,EAAOxC,OAE5B,IAAK,cACD,OAAO+B,EAAMW,QAAO,SAACvB,GAAD,OAAQA,EAAKlB,KAAOuC,EAAOvC,MAE/C,IAAK,YACL,OAAO8B,EAAMD,KAAI,SAACX,GAAD,OAAQA,EAAKlB,KAAOuC,EAAOvC,GAAnB,2BAA4BkB,GAA5B,IAAkChB,MAAOgB,EAAKhB,OAAMgB,KAG7E,IAAK,SACD,OAAOY,EAAMD,KAAI,SAACX,GAChB,OAAGA,EAAKlB,KAAOuC,EAAOvC,GACb,2BACDkB,GADN,IAEGxB,MAAM6C,EAAOxC,KAAKuB,SAClBzB,QAAQ0C,EAAOxC,KAAKwB,WACpBrB,MAAOgB,EAAKhB,OAEHgB,KAIxB,QACI,OAAOY,I,OCpBjBY,EAASC,YAAYL,GAG3BM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAASA,GACnB,kBAAC,EAAD,QAGFK,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3D,c","file":"static/js/main.7a79a281.chunk.js","sourcesContent":["\r\n\r\nimport React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nclass PostForm extends Component {\r\n\r\nhandleSubmit=(e)=>{\r\ne.preventDefault()\r\nlet title = this.getTitle.value\r\nlet message = this.getMessage.value\r\n\r\nconst data= {\r\n    id: new Date(),\r\n    title,\r\n    message,\r\n    edit: false\r\n}\r\n\r\nthis.props.dispatch({\r\n    type:'ADD_POST',\r\n    data\r\n   \r\n})\r\nthis.getTitle.value=\"\"\r\nthis.getMessage.value=\"\"\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"post-container\">\r\n                <h1 className=\"post_heading\">Create Post</h1>\r\n                <form className=\"form\" onSubmit = {this.handleSubmit}>\r\n                    <input required type =\"text\" placeholder = \"Enter post title\" ref ={(input)=>this.getTitle= input}/><br/><br/>\r\n                    <textarea required row=\"5\" cols =\"28\" placeholder=\"Enter post\" ref = {(input)=>this.getMessage= input}/><br/><br/>\r\n                    <button>post</button>\r\n                </form>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(PostForm);"," import React, { Component } from 'react';\r\n import {connect} from 'react-redux'\r\n\r\n class Post extends Component {\r\n     render() {\r\n         return (\r\n             <div className=\"post\">\r\n                 <h2 className=\"post_title\">\r\n                     {this.props.post.title}\r\n                 </h2>\r\n                 <p className=\"post_message\">{this.props.post.message}</p>\r\n                 <div className=\"control-buttons\">\r\n    <button className=\"edit\"\r\n    onClick={() => this.props.dispatch({ type: 'EDIT_POST', id: this.props.post.id })\r\n    }\r\n    >Edit</button>\r\n    <button className=\"delete\"\r\n    onClick={() => this.props.dispatch({ type: 'DELETE_POST', id: this.props.post.id })}\r\n    >Delete</button>\r\n  </div>\r\n             </div>\r\n         );\r\n     }\r\n }\r\n \r\n export default connect()(Post);","import React, { Component } from 'react';\r\nimport { connect} from 'react-redux'\r\n\r\nclass Edit extends Component {\r\n\r\nhandleEdit=(e)=>{\r\n    e.preventDefault()\r\n    const newTitle = this.getTitle.value;\r\n  const newMessage = this.getMessage.value;\r\n  const data={\r\n      newTitle,\r\n      newMessage\r\n  }\r\n\r\n  this.props.dispatch({type: 'UPDATE', id: this.props.post.id, data:data})\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div key={this.props.post.id} className=\"post\">\r\n                <form className=\"form\" onSubmit = {this.handleEdit}>\r\n                <input required type=\"text\" ref={(input) => this.getTitle = input}\r\n    defaultValue={this.props.post.title} placeholder=\"Enter Post Title\" /><br /><br />\r\n    <textarea required rows=\"5\" ref={(input) => this.getMessage = input}\r\n    defaultValue={this.props.post.message} cols=\"28\" placeholder=\"Enter Post\" /><br /><br />\r\n    <button>Update</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(Edit);","\r\nimport React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport Post from './Post'\r\nimport Edit from './Edit'\r\n\r\nclass AllPost extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n               <h1 className=\"post_heading\">All Posts</h1>\r\n               {this.props.posts.map((post)=>(\r\n                   <div key = {post.id}>\r\n                       {post.edit ? <Edit post = {post} key ={post.id}/>\r\n                       : <Post key = {post.id} post = {post}/>}\r\n                       </div>\r\n               ))}\r\n                \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return {\r\n  posts: state\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AllPost);","import React from 'react';\nimport PostForm from './PostForm';\nimport AllPost from './AllPost';\n\nimport './App.css';\n\nclass App extends React.Component{\n  render(){\n    return(\n      <div className=\"App\">\n        <div className = \"navbar\">\n          <h2 className=\"center\">Post It</h2>\n          </div>\n        <PostForm/>\n        <AllPost/>\n        \n      </div>\n    )\n  }\n}\n\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\n\r\nconst postReducer=(state= [], action)=>{\r\n    switch (action.type){\r\n\r\n        case 'ADD_POST':\r\n            return state.concat([action.data])\r\n\r\n            case 'DELETE_POST':\r\n                return state.filter((post)=>post.id !== action.id)\r\n\r\n                case 'EDIT_POST':\r\n                return state.map((post)=>post.id === action.id ? {...post, edit: !post.edit}:post)\r\n\r\n\r\n                case 'UPDATE':\r\n                    return state.map((post)=>{\r\n                      if(post.id === action.id) {\r\n                        return {\r\n                           ...post,\r\n                           title:action.data.newTitle,\r\n                           message:action.data.newMessage,\r\n                           edit: !post.edit\r\n                        }\r\n                      } else return post;\r\n                    })\r\n\r\n\r\n            default:\r\n                return state\r\n    }\r\n\r\n}\r\n\r\nexport default postReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport postReducer from './reducers/postReducer';\nimport {Provider} from 'react-redux'\n\nimport {createStore} from 'redux'\n\nconst store  = createStore(postReducer)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}